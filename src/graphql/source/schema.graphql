schema {
    query: Query
}

enum Difficulty {
    All,
    Easy,
    Medium,
    Hard
}

interface Stats {
    difficulty: Difficulty!
    count: Int!
}

type QuestionCount implements Stats {
    difficulty: Difficulty!
    count: Int!
}

type SubmissionNum implements Stats {
    difficulty: Difficulty!
    count: Int!
    submissions: Int!
}

type SubmitStats {
    acSubmissionNum: [SubmissionNum!]!
    totalSubmissionNum: [SubmissionNum!]!
}

type Profile {
    ranking: Int
    reputation: Int
    starRating: Int
    userAvatar: String
}

type User {
    username: String!
    profileUrl: String
    avatarUrl: String
    profile: Profile!
    submitStats: SubmitStats!
}

enum UserStatus {
    NotStart
}

enum QuestionStatus {
    ac
}

type TopicTag {
    id: String!
    name: String!
    slug: String!
    translatedName: String
}

enum ChallengeType {
    DAILY
}

type ChallengeQuestion {
    id: Int!
    date: String!
    type: ChallengeType!
    incompleteChallengeCount: Int!
    streakCount: Int!
}

enum JudgeType {
    large
}

type Article {
    id: Int!
    paidOnly: Boolean!
    paidOnlyVideo: Boolean!
    canSeeDetail: Boolean!
    hasVideoSolution: Boolean!
}

type CodeSnippet {
    code: String!
    lang: String!
    langSlug: String!
}

# Fields that are received as JSON strings, and parsed to objects at Apollo client type policies
scalar SimilarQuestions
scalar QuestionStats
scalar EnvInfo
scalar MetaData

type Question {
    questionId: Int!
    questionFrontendId: Int!
    boundTopicId: Int
    title: String!
    titleSlug: String!
    categoryTitle: String!
    status: QuestionStatus
    difficulty: Difficulty!
    judgeType: JudgeType!
    judgerAvailable: Boolean!

    translatedTitle: String
    translatedContent: String

    adminUrl: String
    libraryUrl: String

    content: String!
    envInfo: EnvInfo!
    exampleTestcases: String!
    sampleTestCase: String!
    metaData: MetaData!
    similarQuestions: [SimilarQuestions!]!
    stats: QuestionStats!

    likes: Int!
    dislikes: Int!
    acRate: Float!
    freqBar: Int

    # Flags:
    isLiked: Boolean
    isFavor: Boolean!
    isPaidOnly: Boolean!
    hasVideoSolution: Boolean!
    hasSolution: Boolean!
    enableDebugger: Boolean!
    enableRunCode: Boolean!
    enableTestMode: Boolean!

    challengeQuestion: ChallengeQuestion!
    solution: Article!

    contributors: [User!]!
    mysqlSchemas: [String!]!
    codeSnippets: [CodeSnippet!]!
    hints: [String!]!
    topicTags: [TopicTag!]!
    companyTagStats: String
}

type ActiveDailyCodingChallengeQuestion {
    date: String!
    userStatus: UserStatus!
    link: String!
    question: Question!
}

type NotificationStatus {
    lastModified: Int!
    numUnread: Int!
}

type Me {
    userId: Int
    isSignedIn: Boolean
    isMockUser: Boolean
    isPremium: Boolean
    isVerified: Boolean
    isAdmin: Boolean
    isSuperuser: Boolean
    isTranslator: Boolean
    username: String!
    avatar: String
    permissions: [String]!
    activeSessionId: Int!
    notificationStatus: NotificationStatus
}

type Query {
    allQuestionsCount: [QuestionCount!]!
    matchedUser(username: String): User!
    activeDailyCodingChallengeQuestion: ActiveDailyCodingChallengeQuestion!
    question(titleSlug: String): Question!
    userStatus: Me!
}
